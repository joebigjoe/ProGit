PROGIT 第二章

git repository的来源
1. 把一个没有被git manage的folder变成一个全新的repository
2. clone一个其他地方的repository


全新的git
git init

克隆其他的repository
git clone
所有的为文件的历史和版本都被搞到本地
所以叫克隆

git clone可以修改文件夹的名字
git clone https://github.com/libgit2/libgit2 mylibgit

bona fide = genuine; real.

查看repository的状态
git status

实验：
echo "This is learning note for ProGit" > README
git status
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        README

git add README
git status
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   README

git restore --staged README
git status
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        README

add = "add precisely this content to the next commit" rather than "Add this file to the project"

短状态
git status -s

查看不同
git diff
查看working tree与staged area的不同

git diff --staged
查看staged与本地 git repository的不同

git difftool --tool-help
比较工具

commit你的修改
git commit 
会打开你设置的默认core.editor

git commit -m "this is a commit message"
把信息直接打在命令行

git commit -a -m "this is a commit with no add"
-a 会把所有change的文件都commit到本地repository
但是这个不会把以前ignore的文件加进去

删除文件
del FirebaseAnalysis.py
git status
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    FirebaseAnalysis.py

no changes added to commit (use "git add" and/or "git commit -a")
git commit -a "delete file FirebaseAnalysis.py"

git rm FirebaseAnalysis.py
会把文件直接从硬盘删除
需要再做一次git commit来使working tree clean

git rm --cached FirebaseAnalysis.py
不把文件直接从硬盘删除，只把文件变成untracked
需要再做一次git commit来使working tree clean

此时cached和staged 不能通用
synonyms 同义但不同通用
git rm --staged FirebaseAnalysis.py
error: unknown option `staged'
usage: git rm [<options>] [--] <file>...

    -n, --dry-run         dry run
    -q, --quiet           do not list removed files
    --cached              only remove from the index
    -f, --force           override the up-to-date check
    -r                    allow recursive removal
    --ignore-unmatch      exit with a zero status even if nothing matched

重命名文件
git mv name_a name_b

D:\Study_2021\Git\ProGit>git mv README README.md

D:\Study_2021\Git\ProGit>git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        renamed:    README -> README.md

等价于
ren README.md README
git rm README.md
git add README

查看git commit的历史
git log 

只用一行显示
git log --oneline

显示每次commit的简短信息
git log --stat

美化打印
git log --pretty=oneline
git log --pretty=format:"%h - %an, %ar : %s"

patch信息
git log -p -2
最近两个patch的信息

图形化显示
在有branch的时候好用，显示branch合并运动轨迹？
git log --graph

只显示当前文件夹下的改变
git log -- chapter_2

两周之内的改变
git log --since=2.weeks

相关code内容的变化，这个没搞太清楚
git log -S functionname
git log -S FirebaseAnalysis.py

类似于一个search功能
git log --grep .gitignore

修改最近一次的commit
git commit --amend
这个命令也会同样的commit
只是commit之前可以add一些丢掉的文件和修改typo

场景：
git commit -m "add a bunch of files"
git add missingfile.txt
git commit --amend
上次和谷歌合作的经历，就是这样搞了几次。




